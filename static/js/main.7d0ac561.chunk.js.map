{"version":3,"sources":["utils/getWeb3.js","components/Voter.js","components/WorkflowStepper.js","components/ProposalForm.js","components/Proposal.js","components/Content.js","components/Footer.js","components/Header.js","components/App.js","utils/serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","Voter","props","state","workflowStatus","useState","inputVoterAddress","setInputVoterAddress","contract","methods","addVoter","send","from","accounts","onChangeVoterSearch","onChangeShowVoterInfo","error","getVoter","call","voterSearch","className","Container","Row","Col","md","InputGroup","FormControl","placeholder","aria-label","value","onChange","event","preventDefault","target","Button","disabled","variant","onClick","owner","WorkflowStepper","voter","activeStep","setActiveStep","setVoterSearch","voterSearchAddress","setVoterSearchAddress","showVoterInfo","setShowVoterInfo","startRegisteringProposals","stopRegisteringProposals","startVotingSession","stopVotingSession","tallyVotes","useEffect","Box","sx","width","mb","Stepper","alternativeLabel","map","label","Step","key","StepLabel","sm","isRegistered","showVoterInfoValue","Card","style","Body","textAlign","Title","fontSize","Text","color","hasVoted","votedProposalId","ProposalForm","inputAddProposalDescription","setInputAddProposalDescription","addProposal","margin","Proposal","proposals","proposalIdsWinners","proposalId","vote","Alert","Heading","length","xs","proposalIdWinner","height","marginTop","voteCount","description","proposal","index","parseInt","Content","loadingState","Footer","Header","Navbar","bg","expand","Brand","href","Toggle","Collapse","id","App","setState","setWorkflowStatus","setLoadingState","setVoter","setProposals","setProposalIdsWinners","version","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","getWorkflowstatus","getProposals","proposalsResult","getWinningProposalIds","winnersIds","events","WorkflowStatusChange","on","newStatus","returnValues","changed","err","str","VoterRegistered","voterAddress","voterInfo","ProposalRegistered","Voted","winningProposalIds","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d0ac561.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n    new Promise((resolve, reject) => {\n        // Wait for loading completion to avoid race conditions with web3 injection timing.\n        window.addEventListener(\"load\", async () => {\n            // Modern dapp browsers...\n            if (window.ethereum) {\n                const web3 = new Web3(window.ethereum);\n                try {\n                    // Request account access if needed\n                    await window.ethereum.enable();\n                    // Accounts now exposed\n                    resolve(web3);\n                } catch (error) {\n                    reject(error);\n                }\n            }\n            // Legacy dapp browsers...\n            else if (window.web3) {\n                // Use Mist/MetaMask's provider.\n                const web3 = window.web3;\n                console.log(\"Injected web3 detected.\");\n                resolve(web3);\n            }\n            // Fallback to localhost; use dev console port by default...\n            else {\n                const provider = new Web3.providers.HttpProvider(\n                    \"http://127.0.0.1:7545\"\n                );\n                const web3 = new Web3(provider);\n                console.log(\"No web3 instance injected, using Local web3.\");\n                resolve(web3);\n            }\n        });\n    });\n\nexport default getWeb3;\n","import React, { useState } from \"react\";\nimport { Container, Row, Col, Button, FormControl, InputGroup } from 'react-bootstrap';\nimport { PersonPlusFill, Search } from 'react-bootstrap-icons';\n\nimport \"./Voter.css\";\n\nfunction Voter(props) {\n    const state = props.state;\n    const workflowStatus = props.workflowStatus;\n    const [inputVoterAddress, setInputVoterAddress] = useState(\"\");\n\n    function onChangeInputVoterAddress(event) {\n        event.preventDefault();\n        setInputVoterAddress(event.target.value);\n    }\n\n    async function onSubmitAddVoter() {\n        try {\n            await state.contract.methods.addVoter(inputVoterAddress).send({from: state.accounts[0]});\n            props.onChangeVoterSearch(\"\", {});\n            props.onChangeShowVoterInfo(false);\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    async function onSubmitGetVoter() {\n        try {\n            const voterSearch = await state.contract.methods.getVoter(inputVoterAddress).call({from: state.accounts[0]});\n            props.onChangeVoterSearch(inputVoterAddress, voterSearch);\n            props.onChangeShowVoterInfo(true);\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    return (\n        <div className=\"Voter\">\n            <Container>\n                <Row>\n                    <Col md={8}>\n                        <InputGroup>\n                            <FormControl \n                                placeholder=\"Wallet address\"\n                                aria-label=\"Wallet address\"\n                                value={ inputVoterAddress }\n                                onChange={ onChangeInputVoterAddress }\n                            />\n                            <Button disabled={ inputVoterAddress === \"\" } variant=\"outline-secondary\" onClick={ onSubmitGetVoter } >\n                                <Search />\n                            </Button>\n                            { workflowStatus === \"0\"\n                                && state.accounts[0] === state.owner\n                                &&\n                                    <Button disabled={ inputVoterAddress === \"\" } variant=\"outline-secondary\" onClick={ onSubmitAddVoter } >\n                                        <PersonPlusFill />\n                                    </Button>\n                            }\n                        </InputGroup>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n}\n\nexport default Voter;\n","import React, { useState, useEffect } from \"react\";\nimport { Card, Container, Row, Col, Button } from 'react-bootstrap';\nimport { PersonCircle, CheckCircleFill, XCircleFill, CaretRight } from 'react-bootstrap-icons';\nimport { Box, Step, Stepper, StepLabel } from '@mui/material';\nimport Voter from \"./Voter\";\nimport \"./WorkflowStepper.css\";\n\nfunction WorkflowStepper(props) {\n    const state = props.state;\n    const workflowStatus = props.workflowStatus;\n    const voter = props.voter;\n    const steps = [\n        \"Voters Registration\",\n        \"Proposals Registration\",\n        \"Voting session\",\n        \"Results\"\n    ];\n    const [activeStep, setActiveStep] = useState(0);\n    const workflowStatusLabels = [\n        \"Registering Voters\",\n        \"Proposals Registration Started\",\n        \"Proposals Registration Ended\",\n        \"Voting Session Started\",\n        \"Voting Session Ended\",\n        \"Votes Tallied\"\n    ];\n\n    const [voterSearch, setVoterSearch] = useState({});\n    const [voterSearchAddress, setVoterSearchAddress] = useState(\"\");\n    const [showVoterInfo, setShowVoterInfo] = useState(false);\n\n    useEffect(() => {\n        (function () {\n            if (workflowStatus === \"0\") {\n                setActiveStep(0);\n            } else if (\n                workflowStatus === \"1\" ||  \n                workflowStatus === \"2\"\n            ) {\n                setActiveStep(1);\n            } else if (\n                workflowStatus === \"3\" ||  \n                workflowStatus === \"4\"\n            ) {\n                setActiveStep(2);\n            } else if (workflowStatus === \"5\") {\n                setActiveStep(4);\n            }\n        })();\n    }, [workflowStatus]);\n\n    async function startRegisteringProposals() {\n        await state.contract.methods.startRegisteringProposals().send({from: state.accounts[0]});\n        setShowVoterInfo(false);\n        setVoterSearchAddress(\"\");\n        setVoterSearch({});\n    }\n\n    async function stopRegisteringProposals() {\n        await state.contract.methods.stopRegisteringProposals().send({from: state.accounts[0]});\n        setShowVoterInfo(false);\n        setVoterSearchAddress(\"\");\n        setVoterSearch({});\n    }\n\n    async function startVotingSession() {\n        await state.contract.methods.startVotingSession().send({from: state.accounts[0]});\n        setShowVoterInfo(false);\n        setVoterSearchAddress(\"\");\n        setVoterSearch({});\n    }\n\n    async function stopVotingSession() {\n        await state.contract.methods.stopVotingSession().send({from: state.accounts[0]});\n        setShowVoterInfo(false);\n        setVoterSearchAddress(\"\");\n        setVoterSearch({});\n    }\n\n    async function tallyVotes() {\n        await state.contract.methods.tallyVotes().send({from: state.accounts[0]});\n        setShowVoterInfo(false);\n        setVoterSearchAddress(\"\");\n        setVoterSearch({});\n    }\n\n    function onChangeShowVoterInfo(showVoterInfoValue) {\n        setShowVoterInfo(showVoterInfoValue);\n    }\n\n    function onChangeVoterSearch(inputVoterAddress, voterSearch) {\n        setVoterSearchAddress(inputVoterAddress);\n        setVoterSearch(voterSearch);\n    }\n    \n\n    return (\n        <div className=\"WorkflowStepper\">\n            <Container className=\"WorkflowStepperContainer\">\n                <Row>\n                    <Box sx={{ width: '100%', mb: 5 }}>\n                        <Stepper activeStep={ activeStep } alternativeLabel>\n                            { steps.map((label) => (\n                                <Step key={label}>\n                                    <StepLabel>{label}</StepLabel>\n                                </Step>\n                            ))}\n                        </Stepper>\n                    </Box>\n                </Row>\n                <Row className=\"InputRow\">\n                    <Col sm={9}>\n                        { (voter.isRegistered || state.accounts[0] === state.owner)\n                            && <Voter state={ state } workflowStatus={ workflowStatus } onChangeShowVoterInfo={ onChangeShowVoterInfo } onChangeVoterSearch={ onChangeVoterSearch }/>\n                        }\n                    </Col>\n                    <Col sm={3}>\n                        <Row>\n                            <div className=\"WorflowStatus\">State: <b>{ workflowStatusLabels[workflowStatus] }</b></div> \n                        </Row>\n                        <Row>\n                            { state.accounts[0] === state.owner\n                                && workflowStatus === \"0\"\n                                &&\n                                    <Button variant=\"primary\" onClick={ startRegisteringProposals }>\n                                        Start registering proposals\n                                        <CaretRight />\n                                    </Button>\n                            }\n                            { state.accounts[0] === state.owner\n                                && workflowStatus === \"1\"\n                                &&\n                                    <Button variant=\"primary\" onClick={ stopRegisteringProposals }>\n                                        Stop registering proposals\n                                        <CaretRight />\n                                    </Button>\n                            }\n                            { state.accounts[0] === state.owner\n                                && workflowStatus === \"2\"\n                                &&\n                                    <Button variant=\"primary\" onClick={ startVotingSession }>\n                                        Start voting session\n                                        <CaretRight />\n                                    </Button>\n                            }\n                            { state.accounts[0] === state.owner\n                                && workflowStatus === \"3\"\n                                &&\n                                    <Button variant=\"primary\" onClick={ stopVotingSession }>\n                                        Stop voting session\n                                        <CaretRight />\n                                    </Button>\n                            }\n                            { state.accounts[0] === state.owner\n                                && workflowStatus === \"4\"\n                                &&\n                                    <Button variant=\"primary\" onClick={ tallyVotes }>\n                                        Tally votes\n                                        <CaretRight />\n                                    </Button>\n                            }\n                        </Row>\n                    </Col>\n                </Row>\n                <Row>\n                    { showVoterInfo &&\n                        <div className=\"VoterSearchRegisteringInfo\">\n                            <div>\n                                <Card style={{ width: '30rem' }}>\n                                    <Card.Body style={{ textAlign: 'left' }}>\n                                        <Card.Title style={{ fontSize: '15px' }}>\n                                            <Row className=\"InputRowSm\">\n                                                <Col md={1}>\n                                                    <PersonCircle />\n                                                </Col>\n                                                <Col md={11}>\n                                                    { voterSearchAddress }\n                                                </Col>\n                                            </Row>\n                                        </Card.Title>\n                                        <Card.Text>\n                                            <span>\n                                                { voterSearch.isRegistered\n                                                    ?\n                                                        <span>\n                                                            <CheckCircleFill color=\"green\" /> is registered.\n                                                        </span>\n                                                    :\n                                                        <span>\n                                                            <XCircleFill color=\"red\" /> is not registered yet.\n                                                        </span>\n                                                }<br />\n                                                { voterSearch.hasVoted\n                                                    ?\n                                                        <span>\n                                                            <CheckCircleFill color=\"green\" /> has voted <b>Proposal ID#{voterSearch.votedProposalId}</b> \n                                                        </span>\n                                                    :\n                                                        <span>\n                                                            <XCircleFill color=\"red\" /> has not voted yet.\n                                                        </span>\n                                                }\n                                            </span>\n                                        </Card.Text>\n                                    </Card.Body>\n                                </Card>\n                            </div>\n                        </div>\n                    }\n                </Row>\n            </Container>\n        </div>\n    );\n}\n\nexport default WorkflowStepper;\n","import React, { useState } from \"react\";\nimport { Container, Row, Col, Button, InputGroup, FormControl } from 'react-bootstrap';\nimport \"./ProposalForm.css\";\n\nfunction ProposalForm(props) {\n    const state = props.state;\n    const [inputAddProposalDescription, setInputAddProposalDescription] = useState(\"\");\n\n    function onChangeInputAddProposalDescription(event) {\n        event.preventDefault();\n        setInputAddProposalDescription(event.target.value);\n    }\n\n    async function onSubmitAddProposal(event) {\n        event.preventDefault();\n        await state.contract.methods.addProposal(inputAddProposalDescription).send({from: state.accounts[0]});\n        setInputAddProposalDescription(\"\");\n    }\n\n    return (\n        <div className=\"ProposalForm\">\n            <Container>\n                <Row style={{ margin: 'auto', width: '50%' }}>\n                    <Col>\n                        <InputGroup>\n                            <FormControl\n                                placeholder=\"Describe your proposal...\"\n                                aria-label=\"Describe your proposal...\"\n                                value={ inputAddProposalDescription }\n                                onChange={ onChangeInputAddProposalDescription }\n                            />\n                            <Button disabled={ inputAddProposalDescription === \"\" } onClick={ onSubmitAddProposal } >\n                                Submit\n                            </Button>\n                        </InputGroup>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n}\n\nexport default ProposalForm;\n","import React from \"react\";\nimport { Alert, Card, Container, Row, Col, Button } from 'react-bootstrap';\nimport { CheckCircleFill } from 'react-bootstrap-icons';\nimport ProposalForm from \"./ProposalForm\";\nimport \"./Proposal.css\";\n\nfunction Proposal(props) {\n    const state = props.state;\n    const workflowStatus = props.workflowStatus;\n    const voter = props.voter;\n    const proposals = props.proposals;\n    const proposalIdsWinners = props.proposalIdsWinners;\n\n    async function vote(proposalId) {\n        await state.contract.methods.vote(proposalId).send({from: state.accounts[0]});\n    }\n\n    return (\n        <div className=\"Proposal\">\n            <div>\n                { workflowStatus === \"2\"\n                    && voter.isRegistered\n                    && \n                        <Alert variant=\"info\" className=\"AlertBox\">\n                            <Alert.Heading>Proposals registration ended.</Alert.Heading>\n                            <p>\n                                The proposals registration have been ended.<br />\n                                The voting session will be started soon.<br />\n                                Please wait... \n                            </p>\n                        </Alert>\n                }\n                { workflowStatus === \"4\"\n                    && voter.isRegistered\n                    && \n                        <Alert variant=\"info\" className=\"AlertBox\">\n                            <Alert.Heading>Voting session ended.</Alert.Heading>\n                            <p>\n                                The voting session have been ended.<br />\n                                All votes will be tally now.<br />\n                                Please wait, the final result is coming soon... \n                            </p>\n                        </Alert>\n                }\n            </div>\n            <div className=\"ProposalList\">\n                { workflowStatus === \"5\"\n                    && \n                        <div>\n                            <h2 className=\"text-success\">\n                                <CheckCircleFill color=\"green\" /> Winners\n                            </h2>\n                            { proposals.length > 0\n                                && proposalIdsWinners.length > 0 \n                                ? \n                                    <div>\n                                        <Container>\n                                            <Row xs={4}>\n                                                { proposalIdsWinners.map((proposalIdWinner) =>\n                                                    <Col key={ proposalIdWinner }>\n                                                        <Card style={{ width: '18rem', height: '12rem', marginTop: '18px' }}>\n                                                            <Card.Body style={{ textAlign: 'left' }}>\n                                                                <Card.Title style={{ fontSize: '15px' }}>\n                                                                    <Row className=\"InputRowSm\">\n                                                                        <Col sm={8}>\n                                                                            ID#{ proposalIdWinner }\n                                                                        </Col>\n                                                                        <Col sm={4} style={{ textAlign: 'right' }}>\n                                                                            <CheckCircleFill color=\"green\" /> \n                                                                        </Col>\n                                                                    </Row>\n                                                                </Card.Title>\n                                                                <Card.Text>\n                                                                    <b>{ proposals[proposalIdWinner].voteCount } { proposals[proposalIdWinner].voteCount > 1 ? <span>votes</span> : <span>vote</span> }</b>\n                                                                </Card.Text>\n                                                                <Card.Text>\n                                                                    { proposals[proposalIdWinner].description }\n                                                                </Card.Text>\n                                                                <Card.Text>\n                                                                    { voter.hasVoted\n                                                                        && voter.votedProposalId === proposalIdWinner\n                                                                        &&\n                                                                            <span className={ workflowStatus === '5' ? 'text-success' : 'text-primary' }>\n                                                                                You have voted for this proposal.\n                                                                            </span>\n                                                                    }\n                                                                </Card.Text>\n                                                            </Card.Body>\n                                                        </Card>\n                                                    </Col>\n                                                )}\n                                            </Row>\n                                        </Container>\n                                    </div>\n                                :\n                                    <div>\n                                        <Container>\n                                            <Row>\n                                                <Col>There is no proposals.</Col>\n                                            </Row>\n                                        </Container>\n                                    </div>\n                            }\n                            { voter.isRegistered\n                                &&\n                                    <hr />\n                            }\n                        </div>\n                }\n                { voter.isRegistered\n                    &&\n                        <div>\n                            <h2>Proposals</h2>\n                            { workflowStatus === \"1\"\n                                && <ProposalForm state={ state } voter={ voter } />\n                            }\n                            { proposals.length > 0 \n                                ?\n                                    <div>\n                                        <Container>\n                                            <Row xs={4}>\n                                                { proposals.map((proposal, index) =>\n                                                    <Col key={ index }>\n                                                        <Card style={{ width: '18rem', height: '12rem', 'marginTop': '18px' }}>\n                                                            <Card.Body style={{ textAlign: 'left' }}>\n                                                                <Card.Title style={{ fontSize: '15px' }}>\n                                                                    <Row className=\"InputRowSm\">\n                                                                        <Col>\n                                                                            ID#{ index }\n                                                                        </Col>\n                                                                    </Row>\n                                                                </Card.Title>\n                                                                { workflowStatus === \"5\"\n                                                                    &&\n                                                                        <Card.Text>\n                                                                            <b>{ proposal.voteCount } { proposal.voteCount > 1 ? <span>votes</span> : <span>vote</span> }</b>\n                                                                        </Card.Text>\n                                                                }\n                                                                <Card.Text>\n                                                                    { proposal.description }\n                                                                </Card.Text>\n                                                                <Card.Text>\n                                                                    { voter.hasVoted\n                                                                        && parseInt(voter.votedProposalId) === index\n                                                                        &&\n                                                                            <span className={ workflowStatus === '5' ? 'text-success' : 'text-primary' }>\n                                                                                You have voted for this proposal.\n                                                                            </span>\n                                                                    }\n                                                                </Card.Text>\n                                                            </Card.Body>\n                                                            { workflowStatus === \"3\"\n                                                                && !voter.hasVoted\n                                                                &&\n                                                                    <Card.Body>\n                                                                        <Button onClick={ () => vote(index) }>Vote</Button>\n                                                                    </Card.Body>\n                                                            }\n                                                        </Card>\n                                                    </Col>\n                                                )}\n                                            </Row>\n                                        </Container>\n                                    </div>\n                                :\n                                    <div>\n                                        <Container>\n                                            <Row>\n                                                <Col>\n                                                    There is no proposals yet.<br />\n                                                    { workflowStatus === \"1\"\n                                                        && <span>Submit a new one with the button just above.</span>\n                                                    }\n                                                </Col>\n                                            </Row>\n                                        </Container>\n                                    </div>\n                            }\n                        </div>\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default Proposal;\n","import React from \"react\";\nimport { Alert } from 'react-bootstrap';\nimport WorkflowStepper from \"./WorkflowStepper\";\nimport Proposal from \"./Proposal\";\nimport \"./Content.css\";\n\nfunction Content(props) {\n    const state = props.state;\n    const workflowStatus = props.workflowStatus;\n    const loadingState = props.loadingState;\n    const voter = props.voter;\n    const proposals = props.proposals;\n    const proposalIdsWinners = props.proposalIdsWinners;\n\n    return (\n        <div className=\"Content\">\n            { window.ethereum !== \"undefined\"\n                && state.accounts\n                ?\n                    <div>\n                        { (voter.isRegistered || workflowStatus === \"5\")\n                            ?\n                                <div>\n                                    <WorkflowStepper state={ state } workflowStatus={ workflowStatus } voter={ voter } />\n                                    <hr />\n                                    { workflowStatus === \"0\"\n                                        && \n                                            <Alert variant=\"info\" className=\"AlertBox\">\n                                                <Alert.Heading>You are a voter.</Alert.Heading>\n                                                <p>\n                                                    Congratulations!<br />\n                                                    You are registered as a voter.<br />\n                                                    The proposal session will be started soon.<br />\n                                                    Please wait... \n                                                </p>\n                                            </Alert>\n                                    }\n                                    { parseInt(workflowStatus) >= 1\n                                        && parseInt(workflowStatus) <= 5\n                                        &&\n                                            <Proposal\n                                                state={ state }\n                                                workflowStatus={ workflowStatus }\n                                                voter={ voter }\n                                                proposals={ proposals }\n                                                proposalIdsWinners={ proposalIdsWinners }\n                                            />\n                                    }\n                                </div>\n                            :\n                                <div>\n                                    <Alert variant=\"warning\" className=\"AlertBox\">\n                                        <Alert.Heading>You are not a voter.</Alert.Heading>\n                                        <p>\n                                            You are not registered as a voter.<br />\n                                            The admin may add you soon.<br />\n                                            Please wait...\n                                        </p>\n                                    </Alert>\n                                </div>\n                        }\n                    </div>\n                :\n                    <div>\n                        { !loadingState\n                            && \n                                <div>\n                                    <Alert variant=\"danger\" className=\"AlertBox\">\n                                        <Alert.Heading>Wallet not found.</Alert.Heading>\n                                        <p>\n                                            Your wallet is not connected.<br />\n                                            Please check your wallet connection and refresh the page.\n                                        </p>\n                                    </Alert>\n                                </div>\n                        }\n                    </div>\n            }\n        </div>\n    );\n}\n\nexport default Content;\n","import React from \"react\";\nimport \"./Footer.css\";\n\nfunction Footer() {\n    const title = \"Copyright 2021 - Dé Yi Banh\";\n\n    return (\n        <footer>\n            { title }\n        </footer>\n    );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport { Navbar, Container } from 'react-bootstrap';\nimport { CircleFill } from 'react-bootstrap-icons';\nimport \"./Header.css\";\n\nfunction Header(props) {\n    const title = \"Alyra Voting System\";\n    const state = props.state;\n\n    return (\n        <header>\n            <Navbar bg=\"light\" expand=\"lg\">\n                <Container>\n                    <Navbar.Brand href=\"#\">{ title }</Navbar.Brand>\n                    <Navbar.Toggle />\n                        <Navbar.Collapse className=\"justify-content-end\">\n                        <Navbar.Text id=\"walletInfo\">\n                            { window.ethereum !== \"undefined\" && state.accounts\n                                ?\n                                    <div>\n                                        <div>\n                                            <span className=\"walletInfoLabel\">Wallet connected</span>\n                                            <CircleFill color=\"green\" />\n                                        </div>\n                                        <div>\n                                            <u>{ state.accounts[0] }</u>\n                                        </div>\n                                    </div>\n                                :   <div>\n                                        <span className=\"walletInfoLabel\">Your wallet is not connected</span>\n                                        <CircleFill color=\"red\" />\n                                    </div>\n                            }\n                            { window.ethereum !== \"undefined\"\n                                && state.accounts\n                                && state.accounts[0] === state.owner\n                                && \n                                    <div>\n                                        (Owner)\n                                    </div>\n                            }\n                        </Navbar.Text>\n                    </Navbar.Collapse>\n                </Container>\n            </Navbar>\n        </header>\n    );\n}\n\nexport default Header;\n","import React, { useState, useEffect } from \"react\";\nimport VotingContract from \"../contracts/Voting.json\";\nimport getWeb3 from \"../utils/getWeb3\";\nimport Content from \"./Content\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport \"./App.css\";\n\nfunction App() {\n    const [state, setState] = useState({\n        web3: null,\n        accounts: null,\n        contract: null,\n        owner: null\n    });\n    const [workflowStatus, setWorkflowStatus] = useState(\"0\");\n    const [loadingState, setLoadingState] = useState(true);\n    const [voter, setVoter] = useState({});\n    const [proposals, setProposals] = useState([]);\n    const [proposalIdsWinners, setProposalIdsWinners] = useState([]);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                const web3 = await getWeb3();\n                console.log(web3.version);\n                const accounts = await web3.eth.getAccounts();\n                const networkId = await web3.eth.net.getId();\n                const deployedNetwork = VotingContract.networks[networkId];\n                const instance = new web3.eth.Contract(\n                    VotingContract.abi,\n                    deployedNetwork && deployedNetwork.address\n                );\n                const owner = await instance.methods.owner().call();\n                const workflowStatus = await instance.methods.getWorkflowstatus().call();\n                const voter = await instance.methods.getVoter(accounts[0]).call();\n\n                setState({\n                    web3,\n                    accounts,\n                    contract: instance,\n                    owner\n                });\n                setWorkflowStatus(workflowStatus);\n                setLoadingState(false);\n                setVoter(voter);\n\n                if (parseInt(workflowStatus) >= 1 && voter.isRegistered) {\n                    const proposalsResult = await instance.methods.getProposals().call({from: accounts[0]});\n                    setProposals(proposalsResult);\n                }\n\n                if (workflowStatus === \"5\") {\n                    const winnersIds = await instance.methods.getWinningProposalIds().call();\n                    setProposalIdsWinners(winnersIds);\n                }\n\n                await instance.events.WorkflowStatusChange()\n                    .on(\"data\", event => {\n                        const newStatus = event.returnValues.newStatus;\n                        setWorkflowStatus(newStatus);\n                        console.log(\"Workflow status have been changed: \" + newStatus);\n                    })\n                    .on(\"changed\", changed => console.log(changed))\n                    .on(\"error\", err => console.error(err))\n                    .on(\"connected\", str => console.log(str));\n\n                await instance.events.VoterRegistered()\n                    .on(\"data\", async event => {\n                        const voterAddress = event.returnValues.voterAddress;\n\n                        if (voterAddress === accounts[0]) {\n                            const voterInfo = await instance.methods.getVoter(accounts[0]).call();\n                            setVoter(voterInfo);\n                        }\n\n                        console.log(\"New voter have been registered: \" + voterAddress);\n                    })\n                    .on(\"changed\", changed => console.log(changed))\n                    .on(\"error\", err => console.error(err))\n                    .on(\"connected\", str => console.log(str));\n\n\n                await instance.events.ProposalRegistered()\n                    .on(\"data\", async event => {\n                        const proposalsResult = await instance.methods.getProposals().call({from: accounts[0]});\n                        setProposals(proposalsResult);\n                        console.log(\"New proposal pushed.\");\n                    })\n                    .on(\"changed\", changed => console.log(changed))\n                    .on(\"error\", err => console.error(err))\n                    .on(\"connected\", str => console.log(str));\n\n                await instance.events.Voted()\n                    .on(\"data\", async event => {\n                        const voterAddress = event.returnValues.voterAddress;\n                        // const proposalId = event.returnValues.proposalId;\n\n                        if (voterAddress === accounts[0]) {\n                            const voter = await instance.methods.getVoter(accounts[0]).call();\n                            setVoter(voter);\n                        }\n\n                        console.log(\"New voter have voted: \" + voterAddress);\n                    })\n                    .on(\"changed\", changed => console.log(changed))\n                    .on(\"error\", err => console.error(err))\n                    .on(\"connected\", str => console.log(str));\n            } catch (error) {\n                setLoadingState(false);\n                console.error(error);\n            }\n        })();\n        // eslint-disable-next-line\n    }, []);\n\n    useEffect(() => {\n        (async () => {\n            if (state && state.contract && state.contract.methods) {\n                if (workflowStatus === \"5\") {\n                    const proposals = await state.contract.methods.getProposals().call();\n                    const winningProposalIds = await state.contract.methods.getWinningProposalIds().call();\n                    setProposals(proposals);\n                    setProposalIdsWinners(winningProposalIds);\n                }\n            }\n        })()\n        // eslint-disable-next-line\n    }, [workflowStatus]);\n\n    return (\n        <div className=\"App\">\n            <Header state={ state } />\n            <Content \n                state={ state }\n                workflowStatus={ workflowStatus }\n                loadingState={ loadingState }\n                voter={ voter }\n                proposals={ proposals }\n                proposalIdsWinners={ proposalIdsWinners } />\n            <hr />\n            <Footer />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './utils/serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}